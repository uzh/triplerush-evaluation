# This is an example deployment configuration.
# The actually used configuration has the be named deployment.config
deployment {
	torque {
		server {
			address = "torque-server-address"
			username = "your-server-username"
		}
		job {
		    repetitions = 1
			number-of-nodes = 3
			cores-per-node = 23
			memory = "80gb"
			walltime = "00:59:59"
			working-dir = "/home/torque/tmp/${USER}.${PBS_JOBID}"
		}
	}
	jvm {
		deployed-jar = "./target/scala-2.11/triplerush-evaluation-assembly-1.0-SNAPSHOT.jar"
		binary-path = "" 
		parameters = "-Xmx20000m -Xms20000m -XX:+AggressiveOpts -XX:+AlwaysPreTouch -XX:+UseNUMA -XX:-UseBiasedLocking -XX:MaxInlineSize=1024"
	}
	akka {
		kryo-initializer = "com.signalcollect.triplerush.serialization.TripleRushKryoInit"
		kryo-registrations = [
      "com.signalcollect.triplerush.vertices.RootIndex",
      "com.signalcollect.triplerush.vertices.SIndex",
      "com.signalcollect.triplerush.vertices.PIndex",
      "com.signalcollect.triplerush.vertices.OIndex",
      "com.signalcollect.triplerush.vertices.SPIndex",
      "com.signalcollect.triplerush.vertices.POIndex",
      "com.signalcollect.triplerush.vertices.SOIndex",
      "com.signalcollect.triplerush.TriplePattern",
      "com.signalcollect.triplerush.PlaceholderEdge",
      "com.signalcollect.triplerush.CardinalityRequest",
      "com.signalcollect.triplerush.CardinalityReply",
      "com.signalcollect.triplerush.PredicateStatsReply",
      "com.signalcollect.triplerush.ChildIdRequest",
      "com.signalcollect.triplerush.ChildIdReply",
      "com.signalcollect.triplerush.SubjectCountSignal",
      "com.signalcollect.triplerush.ObjectCountSignal",
      "Array[com.signalcollect.triplerush.TriplePattern]",
      "com.signalcollect.interfaces.AddEdge",
      "com.signalcollect.triplerush.CombiningMessageBusFactory",
      "com.signalcollect.triplerush.SingleNodeTripleMapperFactory$",
      "com.signalcollect.triplerush.DistributedTripleMapperFactory$",
      "com.signalcollect.triplerush.TripleRush$$anonfun$loadNtriples$1",
      "com.signalcollect.triplerush.PredicateStats",
      "scala.reflect.ManifestFactory$$anon$10",
      "com.signalcollect.triplerush.util.TripleRushStorage$",
      "akka.actor.RepointableActorRef",
      "com.signalcollect.triplerush.TripleRushEdgeAddedToNonExistentVertexHandlerFactory$",
      "com.signalcollect.factory.scheduler.Throughput$mcJ$sp",
      "com.signalcollect.triplerush.TripleRushUndeliverableSignalHandlerFactory$",
      "com.signalcollect.triplerush.util.TripleRushWorkerFactory",
      "com.signalcollect.interfaces.BulkSignalNoSourceIds$mcJ$sp",
      "com.signalcollect.interfaces.SignalMessageWithoutSourceId$mcJ$sp"
 		]
	}
	setup {
		#copy-files = [
        #    {
        #        local-path = "./some-local-file-name"
        #        remote-path = "~/some-remote-file-name"
        #    }
		#]
	}
	algorithm {
		class = "com.signalcollect.triplerush.evaluation.TripleRushEvaluation"
		parameters {
			"evaluationDescription" = "LUBM160 Benchmark."
			"jitRepetitions" = "100"
			"dataset" = "LUBM"
			"universities" = "160"
			"optimizerCreator" = "com.signalcollect.triplerush.optimizers.ExplorationOptimizerCreator"
			"spreadsheetUsername" = "SomeUsername"
			"spreadsheetPassword" = "SomePassword"
			"spreadsheetName" = "triplerush"
			"worksheetName" = "data"
		}
	}
}
